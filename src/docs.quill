
mod docs

use js::*
use frontend::*

pub val DOCUMENTS: List[Pair[String, String]] = List::of(
    Pair("Introduction",        "README.md"      ),
    Pair("Types",               "types.md"       ),
    Pair("Functions",           "functions.md"   ),
    Pair("Variables",           "variables.md"   ),
    Pair("Constants",           "constants.md"   ),
    Pair("Modules",             "modules.md"     ),
    Pair("Operators",           "operators.md"   ),
    Pair("Control Flow",        "control_flow.md"),
    Pair("Literals",            "literals.md"    ),
    Pair("Structures",          "structures.md"  ),
    Pair("Enumerations",        "enumerations.md"),
    Pair("Anonymous Functions", "closures.md"    ),
    Pair("Templates",           "templates.md"   ),
    Pair("External Functions",  "externals.md"   )
)

val DOCUMENTS_BASE_DIR: String = "docs/"

pub ext fun parse_markdown(input: String) -> String 
    = "return marked.parse(#var(input));"

pub fun current_document_index() -> Int {
    val s: String = WINDOW |> location() |> search()
    if s |> starts_with("?") {
        return s |> slice_from(1) 
            |> Int::parse()
            |> unwrap_or(0)
    }
    return 0
}

pub fun replace_document_refs(input: String) -> String {
    mut acc = input
    for doc_i: DOCUMENTS |> indices() {
        val doc_p: String = (DOCUMENTS |> at(doc_i)).second
        val repl_p: String = "?" |> concat(doc_i |> as_string())
        acc = acc |> split(doc_p) |> join(repl_p)
    }
    return acc
}

fun make_link_button(id: Int, next: Bool) -> mut Element {
    val document: mut Document = WINDOW |> document()
    val top: mut Element = document |> create_element_str("span")
    top |> class_list() |> add("link-button-top")
    val top_txt: String = if next { "Next" } else { "Previous" }
    top |> set_text_content(Option::Some(top_txt |> as_js()))
    val sub: mut Element = document |> create_element_str("span")
    sub |> class_list() |> add("link-button-sub")
    val sub_txt: String = (DOCUMENTS |> at(id)).first
    sub |> set_text_content(Option::Some(sub_txt |> as_js()))
    val button: mut Element = document |> create_element_str("button")
    val button_side: String = if next { "next-button" } else { "prev-button" }
    button |> class_list() |> add("link-button", button_side)
    button |> append_child(top |> as_mnode())
    button |> append_child(document |> create_element_str("br") |> as_mnode())
    button |> append_child(sub |> as_mnode())
    button |> add_event_listener("click", Option::Some(|_| {
        render_document(id)
    }), UNDEF)
    return button
}

pub fun render_document(id: Int) {
    val page_document: mut Document = WINDOW |> document()
    val page_element: mut Element = page_document 
        |> first_element_child() 
        |> expect("Document has no <html> tag!")
    val new_url: String = WINDOW |> location() 
        |> pathname()
        |> concat("?")
        |> concat(id |> as_string())
    WINDOW |> history() |> replace_state(
        JsObject::empty() |> as_js(),
        "",
        Option::Some(new_url)
    )
    val out: mut Element = page_document
        |> get_element_by_id("doc")
        |> expect("Document has no element with ID 'doc'!")
    val doc_name: String = (DOCUMENTS |> at(id)).second
    val doc_path: String = DOCUMENTS_BASE_DIR |> concat(doc_name)
    val insert_result: Fun(String) = |html| {
        page_element |> set_scroll_top(0.0)
        out |> set_inner_html(html |> replace_document_refs() |> as_js())
        playground::embedded()
        if id > 0 {
            val prev_b: mut Element = make_link_button(id - 1, false)
            out |> append_child(prev_b |> as_mnode())
        }
        val next_id: Int = (id + 1) % (DOCUMENTS |> length())
        val next_b: mut Element = make_link_button(next_id, true)
        out |> append_child(next_b |> as_mnode())
    }
    WINDOW |> fetch(doc_path |> as_js(), RequestInit::default())
        |> then(Response::text)
        |> map(parse_markdown)
        |> map(insert_result)
}

pub fun render_current_document() {
    render_document(current_document_index())
}